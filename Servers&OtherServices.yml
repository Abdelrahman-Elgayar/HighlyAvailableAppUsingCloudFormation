Description: This is Abdelrahman Alaa Eldeen setting-up the servers and services required to deploy a high availability web app using CloudFormation.

Parameters:
  EnvironmentName:
    Type: String

Resources:
  LoadBalancerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPC"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPC"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref LoadBalancerSecGroup
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
  WebServerLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-0ac73f33a1888c64a
      InstanceType: t3.small
      InstanceMonitoring: true
      SecurityGroups:
        - !Ref WebServerSecGroup
      IamInstanceProfile: !Ref WebServerInstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '10'
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install apache2 awscli -y
          systemctl enable --now apache2.service
          aws s3 sync s3://firstsetup-s3bucket-1jhfg2g298sew /var/www/html
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPC"
      Port: 80
      Protocol: HTTP
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - "/*"
      ListenerArn: !Ref Listener
      Priority: 1
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${EnvironmentName}-ALB"
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PubSub1"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PubSub2"
      SecurityGroups:
        - !Ref LoadBalancerSecGroup
  WebServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref WebServerLaunchConfiguration
      MaxSize: '4'
      MinSize: '2'
      DesiredCapacity: '2'
      VPCZoneIdentifier:
        - Fn::ImportValue: 
            !Sub "${EnvironmentName}-PrivSubnetList"
      TargetGroupARNs:
        - !Ref TargetGroup
  EC2S3AccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
  S3AccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3AccessPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: !Sub "arn:aws:s3:::firstsetup-s3bucket-1jhfg2g298sew/*"
          - Effect: Allow
            Action:
              - s3:ListBucket
              - s3:GetBucketLocation
            Resource: !Sub "arn:aws:s3:::firstsetup-s3bucket-1jhfg2g298sew/*"
      Roles:
        - !Ref EC2S3AccessRole
  WebServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2S3AccessRole

Outputs:
  DNSName:
    Value: http://abdelrahmanudacityfwd-alb-1245735691.us-west-2.elb.amazonaws.com/
    Export: 
      Name: !Sub "${EnvironmentName}-DNSName"